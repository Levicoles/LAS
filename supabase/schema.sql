-- Supabase SQL schema for Library Attendance System

-- Books table
create table if not exists public.books (
  id bigint generated by default as identity primary key,
  title text not null,
  author text not null,
  shelf integer not null check (shelf > 0),
  available boolean not null default true,
  isbn text null,
  created_at timestamptz not null default now()
);

-- Students table
create table if not exists public.students (
  id bigint generated by default as identity primary key,
  lrn text not null unique,
  name text not null,
  year_level text not null,
  section text not null,
  created_at timestamptz not null default now()
);

-- Attendance table
create table if not exists public.attendance (
  id bigint generated by default as identity primary key,
  student_id bigint not null references public.students(id) on delete cascade,
  check_in timestamptz not null default now(),
  check_out timestamptz null,
  created_at timestamptz not null default now()
);

-- Convenience view for recent activity
create or replace view public.attendance_view as
select 
  a.id,
  case when a.check_out is null then 'in' else 'out' end as type,
  s.name as user,
  (case when a.check_out is null then 'Checked in' else 'Checked out' end) as action,
  coalesce(a.check_out, a.check_in) as time,
  case when a.check_out is not null then age(a.check_out, a.check_in) end as duration
from public.attendance a
join public.students s on s.id = a.student_id;

-- Function to compute average stay time in seconds
create or replace function public.attendance_avg_stay_seconds()
returns table(avg_seconds numeric)
language sql
as $$
  select avg(extract(epoch from (check_out - check_in))) as avg_seconds
  from public.attendance
  where check_out is not null;
$$;

-- Enable RLS but allow anon read/write for prototype (tighten later)
alter table public.books enable row level security;
alter table public.students enable row level security;
alter table public.attendance enable row level security;

do $$
begin
  -- Books policies
  if not exists (
    select 1 from pg_policies where schemaname = 'public' and tablename = 'books' and policyname = 'books_anon_all'
  ) then
    create policy books_anon_all on public.books for all using (true) with check (true);
  end if;

  -- Students policies
  if not exists (
    select 1 from pg_policies where schemaname = 'public' and tablename = 'students' and policyname = 'students_anon_all'
  ) then
    create policy students_anon_all on public.students for all using (true) with check (true);
  end if;

  -- Attendance policies
  if not exists (
    select 1 from pg_policies where schemaname = 'public' and tablename = 'attendance' and policyname = 'attendance_anon_all'
  ) then
    create policy attendance_anon_all on public.attendance for all using (true) with check (true);
  end if;
end$$;


